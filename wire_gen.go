// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//+build !wireinject

package main

import (
	"github.com/martinv13/go-shiny/controllers"
	"github.com/martinv13/go-shiny/models"
	"github.com/martinv13/go-shiny/modules/appserver"
	"github.com/martinv13/go-shiny/modules/config"
	"github.com/martinv13/go-shiny/modules/ssehandler"
	"github.com/martinv13/go-shiny/modules/vfsdata"
	"github.com/martinv13/go-shiny/server"
)

// Injectors from wire.go:

func InitializeServer() (*server.AppRouter, error) {
	configViper, err := config.NewConfigViper()
	if err != nil {
		return nil, err
	}
	staticPaths := vfsdata.NewStaticPaths(configViper)
	db, err := models.NewDB(configViper)
	if err != nil {
		return nil, err
	}
	groupModelDB := models.NewGroupModelDB(db)
	appModelDB, err := models.NewAppModelDB(db, groupModelDB)
	if err != nil {
		return nil, err
	}
	messageBroker := ssehandler.NewMessageBroker()
	appServer, err := appserver.NewAppServer(appModelDB, messageBroker, configViper)
	if err != nil {
		return nil, err
	}
	appController := controllers.NewAppController(appModelDB, appServer)
	userModelDB := models.NewUserModelDB(db, groupModelDB)
	userController := controllers.NewUserController(userModelDB)
	groupController := controllers.NewGroupController(groupModelDB)
	authController := controllers.NewAuthController(userModelDB)
	appRouter, err := server.NewAppRouter(configViper, staticPaths, appServer, messageBroker, appController, userController, groupController, authController)
	if err != nil {
		return nil, err
	}
	return appRouter, nil
}
